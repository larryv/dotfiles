# The %F prompt escape was introduced in zsh 4.3.7. Use the numbered
# form (e.g., %1F) so zsh uses termcap instead of ANSI sequences:
#   - https://sourceforge.net/p/zsh/code/ci/zsh-4.3.7/tree/Src/prompt.c
#   - http://mywiki.wooledge.org/BashFAQ/037
#   - http://wiki.bash-hackers.org/scripting/terminalcodes
function {
    typeset -a vers=(${(s:.:)ZSH_VERSION})
    if (( vers[1] > 4
            || vers[1] == 4 && vers[2] > 3
            || vers[1] == 4 && vers[2] == 3 && vers[3] >= 7 ))
    then
        zsh_has_prompt_F=yes
    fi
}

# TODO: If compatible with 4.3.6, move everything into a prompt theme.

# Required for vcs_info and some other fancypants junk.
setopt PROMPT_SUBST

# Left prompt: Hostname, history number, indication of last exit status,
# privileges/shell-nesting indicator.
PS1='[%m] %B%h%b '
if [[ -n ${zsh_has_prompt_F} ]]
then
    # Color the privileges/shell-nesting indicator green if the last
    # exit status was 0, red otherwise.
    PS1+='%(?.%2F.%1F)%B${(r:$((SHLVL * 2))::%#:)}%b%f '
else
    # Display the last exit status directly.
    PS1+='(%?) %B${(r:$((SHLVL * 2))::%#:)}%b '
fi

# Right prompt: Current working directory (truncated to half screen
# width) and version control info.
RPS1='%B%$((COLUMNS / 2))<..<%~%b'
autoload -Uz vcs_info && vcs_info 2>/dev/null && {
    typeset -a precmd_functions
    precmd_functions+=vcs_info
    RPS1+='${vcs_info_msg_0_:+ ${vcs_info_msg_0_}}'

    zstyle ':vcs_info:*' enable git hg svn

    zstyle ':vcs_info:*' formats '(%s:%b)'
    zstyle ':vcs_info:*' actionformats '(%s:%b|%a)'
    zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b/%r'

    zstyle ':vcs_info:git:*' check-for-changes true
    if [[ -n ${zsh_has_prompt_F} ]]
    then
        # Color green/yellow/red if there are no/staged/unstaged changes.
        zstyle ':vcs_info:git:*' unstagedstr '%1F'
        zstyle ':vcs_info:git:*' stagedstr '%3F'
        zstyle ':vcs_info:git:*' formats '%2F%u%c(%s:%b)%f'
        zstyle ':vcs_info:git:*' actionformats '%2F%u%c(%s:%b|%a)%f'
    else
        zstyle ':vcs_info:git:*' unstagedstr ':U'
        zstyle ':vcs_info:git:*' stagedstr ':S'
        zstyle ':vcs_info:git:*' formats '(%s:%b%u%c)'
        zstyle ':vcs_info:git:*' actionformats '(%s:%b%u%c|%a)'
    fi
}

# Send current working directory to the terminal emulator.
autoload -Uz update_terminal_pwd && update_terminal_pwd 2>/dev/null && {
    typeset -a precmd_functions
    precmd_functions+=update_terminal_pwd
}

# Enable completion and other things.
autoload -Uz run-help zargs zrecompile
autoload -Uz compinit && compinit && {
    zstyle ':completion:*:descriptions' format '%B%d%b'
    if [[ -n ${zsh_has_prompt_F} ]]
    then
        zstyle ':completion:*:warnings' format '%1F%BNo matches for %d%b%f'
    else
        zstyle ':completion:*:warnings' format '%BNo matches for %d%b'
    fi
}

# Enable fancy globbing; stop at slashes when moving wordwise.
setopt EXTENDED_GLOB
WORDCHARS=${WORDCHARS/\//}

# History.
SAVEHIST=1000000
HISTSIZE=$SAVEHIST
HISTFILE=$ZDOTDIR/zsh_history
setopt EXTENDED_HISTORY
# Requires zsh 5.0.6. Hopefully I'll never use a shell so old that it
# requires setting APPEND_HISTORY explicitly.
setopt INC_APPEND_HISTORY_TIME 2>/dev/null

# Aliases.
#
# TODO: Make the function versions handle argument quoting properly.
# This currently fails pretty badly. Just try running "ls" on
# a directory with a quoted space in its name.
# ls (); emulate zsh -c 'command ls -AFh '"$argv[*]"
alias ls='ls -AFh'

# Print timing stats for commands that use over 10 seconds of CPU time.
REPORTTIME=10

if [[ -o LOGIN ]]
then
    # The zsh documentation discourages setting environment variables from
    # .zprofile or .zlogin (http://zsh.sourceforge.net/Intro/intro_3.html),
    # so do it here.
    export GREP_OPTIONS=--color=auto
    export PAGER=less
    export VISUAL=vim

    # Determine if the active keyboard layout is from QuasiQWERTY.
    kbd_layout=$(defaults read com.apple.HIToolbox.plist \
                    AppleCurrentKeyboardLayoutInputSourceID 2>/dev/null)
    case ${kbd_layout} in
        me.larryv.keylayout.*)
            kbd_layout=${kbd_layout#*.keylayout.}
            ;;
        *)
            kbd_layout=
            ;;
    esac

    # Helper function for managing symbolic links to quasiqwertyrc.
    function update_ln {
        local src=$1 dst=$2
        cd ${dst:h} && {
            if [[ ! -e $src ]]
            then
                rm -f $dst
            elif [[ ! $src -ef $dst ]]
            then
                ln -fs $src $dst
            fi
        } always {
            cd $OLDPWD
        }
    }

    # Use quasiqwertyrc keybindings if available.
    function {
        if [[ -f $1 ]]
        then
            . $1
        fi
    } ~/.quasiqwertyrc/${kbd_layout}/zshrc
fi

# Source application-specific "topic" scripts.
for script in $ZDOTDIR/*.zshrc(N)
do
    . $script
done

# Cleanup
unset zsh_has_prompt_F

# vim: set filetype=zsh:
