# zsh/_zsh/functions/update_terminal_cwd
# --------------------------------------
#
# SPDX-License-Identifier: CC0-1.0
#
# Written in 2016, 2018-2023 by Lawrence Velazquez <vq@larryv.me>.
#
# To the extent possible under law, the author(s) have dedicated all
# copyright and related and neighboring rights to this software to the
# public domain worldwide.  This software is distributed without any
# warranty.
#
# You should have received a copy of the CC0 Public Domain Dedication
# along with this software.  If not, see
# <https://creativecommons.org/publicdomain/zero/1.0/>.


# Identify the current working directory to the terminal.  Use by
# registering as a chpwd or precmd hook:
#
#     fpath=(/wherever/this/file/lives $fpath)
#
#     # With add-zsh-hook (requires zsh 4.3.4 or later).
#     autoload -Uz add-zsh-hook
#     add-zsh-hook -Uz chpwd update_terminal_cwd
#
#     # Without add-zsh-hook.
#     autoload -Uz update_terminal_cwd
#     typeset -ag chpwd_functions
#     chpwd_functions+=(update_terminal_cwd)
#
# Currently supports Apple Terminal.


emulate -L zsh

if [[ $INSIDE_EMACS ]]; then
    return 0
fi

# TODO: Accommodate other terminal emulators.
# TODO: Identify terminals in tmux sessions, where TERM_PROGRAM and TERM
# are changed.
if [[ ${TERM_PROGRAM:-$TERM} != (Apple_Terminal|nsterm-*|nsterm) ]]; then
    return 1
fi

# Process pathnames bytewise and use POSIX character classes.
#
# TODO: Reassess whether this is the best way to handle paths.  For
# wrinkles, see https://www.etalabs.net/sh_tricks.html, section
# "Overriding locale categories".
local LC_ALL= LC_CTYPE=C

# Provide alternatives if HOST [1] or PWD (which are set by zsh) are
# null for some reason.  It's fine if HOST ends up null after all
# because RFC 8089 considers "file-auth"-less URIs [2] to be local [3].
if [[ ! -v HOST ]]; then
    local HOST=$(hostname 2>/dev/null)
fi
if [[ ! -v PWD ]]; then
    local PWD=${"$(pwd && echo x)"%??}
fi

# Percent-encode URI components as per RFC 3986, except for permitted
# characters [4][5].  Do encode ';' in the path, otherwise Terminal
# truncates it there.
setopt EXTENDED_GLOB
local enchost=${HOST//(#m)[!-[:alnum:]._~!$&\'()*+,;=]/%$(([##16] #MATCH))}
local encpath=${PWD//(#m)[!-\/[:alnum:]._~!$&\'()*+,=:@]/%$(([##16] #MATCH))}

# Assemble the OSC sequences specified in Terminal's Preferences.  Clear
# the current working document in case another program set it.
local uri=${encpath:+file://${enchost}${encpath}}
local dirseq=$'\e]7;'${uri}$'\a'
local docseq=$'\e]6;\a'
local seqs=${dirseq}${docseq}

# Modify the sequences so tmux passes them through [6].
if [[ $TMUX ]]; then
    seqs=$'\ePtmux;'${seqs//$'\e'/$'\e\e'}$'\e\\'
fi

# Print final sequences to the terminal emulator.
print -nr -- $seqs


# References
#
#  1. /etc/bashrc and /etc/bashrc_Apple_Terminal on Mac
#  2. https://www.rfc-editor.org/rfc/rfc8089.html#section-2
#  3. https://www.rfc-editor.org/rfc/rfc8089.html#section-3
#  4. https://www.rfc-editor.org/rfc/rfc3986.html#section-3.2.2
#  5. https://www.rfc-editor.org/rfc/rfc3986.html#section-3.3
#  6. https://github.com/tmux/tmux/wiki/FAQ#what-is-the-passthrough-escape-sequence-and-how-do-i-use-it


# vim: set filetype=zsh:
