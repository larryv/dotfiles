# update_terminal_cwd
# -------------------
#
# Identify the current working directory to the terminal emulator. To
# use, register as a chpwd or precmd hook:
#
#     fpath=(/wherever/this/file/lives $fpath)
#
#     # With add-zsh-hook (requires zsh 4.3.4 or later).
#     autoload -Uz add-zsh-hook
#     add-zsh-hook -Uz chpwd update_terminal_cwd
#
#     # Without add-zsh-hook.
#     autoload -Uz update_terminal_cwd
#     typeset -a chpwd_functions
#     chpwd_functions+=update_terminal_cwd
#
# Currently supports Terminal.app on OS X / macOS.


emulate -L zsh

[[ -z ${INSIDE_EMACS} ]] || return

# TODO: Figure out how to communicate terminal type via SSH.
[[ ${TERM_PROGRAM} == Apple_Terminal || -n ${SSH_TTY} ]] || return

# Provide alternatives if HOST, LOGNAME, or PWD (which are set by zsh)
# are null or unset for some reason.

[[ -n $HOST ]] || local HOST=$(hostname)

# I don't know whether LOGNAME/logname(1) or USERNAME/id(1) is more
# appropriate for this function.
[[ -n $LOGNAME ]] || local LOGNAME=$(logname)

# Quoting prevents splitting on any whitespace that pwd(1) outputs,
# including the final newline.
[[ -n $PWD ]] || local PWD=${"$(pwd; echo x)"%??}

# Percent-encode the URI components, except for slashes in the path.
setopt EXTENDED_GLOB NO_MULTIBYTE
local enchost=${HOST//(#m)?/%$(([##16] #MATCH))}
local encuser=${LOGNAME//(#m)?/%$(([##16] #MATCH))}
local encpath=${PWD//(#m)[^\/]/%$(([##16] #MATCH))}

# This OSC sequence is from Terminal.app's General Preferences.
local fmt='\e]7;%s\a'

# Inside tmux, wrap the sequence to pass it through
# (https://www.mail-archive.com/tmux-users@lists.sourceforge.net/msg03485.html).
[[ -n $TMUX ]] && fmt='\ePtmux;\e'${fmt}'\e\'

# Assemble URI and print complete sequence to the terminal emulator.
printf $fmt file://${enchost:+${encuser:+${encuser}@}${enchost}}${encpath}


# See also
#   - /etc/bashrc and /etc/bashrc_Apple_Terminal on OS X / macOS
#   - https://timingapp.com/help/terminal


# vim: set filetype=zsh:
