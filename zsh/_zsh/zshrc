# Use the "emacs" ZLE keymap even if EDITOR is "vi" or "vim".
bindkey -e

# >= 4.3.7: %1F, %2F, %3F, %f (numbered form uses termcap:
# https://sourceforge.net/p/zsh/code/ci/zsh-4.3.7/tree/Src/prompt.c)
if (( ${$(tput colors || tput Co):-0} >= 8 )); then
    # Prefer terminfo/termcap over raw ANSI escape sequences:
    #   - https://mywiki.wooledge.org/BashFAQ/037
    #   - https://wiki.bash-hackers.org/scripting/terminalcodes
    # Avoid using Functions/Misc/colors, which hard-codes ANSI sequences and
    # might not be installed. Define my own colors instead.
    typeset -A fg
    fg[red]=$(tput setaf 1 || tput AF 1) || fg[red]=$'\e[31m'
    fg[green]=$(tput setaf 2 || tput AF 2) || fg[green]=$'\e[32m'
    fg[yellow]=$(tput setaf 3 || tput AF 3) || fg[yellow]=$'\e[33m'
    # `tput setaf 9` doesn't have the desired effect on xterm-256color. Note
    # that `tput op` resets the background color as well, which is fine here.
    fg[default]=$(tput op) || fg[default]=$'\e[39m'
fi 2>/dev/null

# TODO: If compatible with 4.3.6, move everything into a prompt theme.

# Left prompt: Hostname, history number, indication of last exit status,
# privileges/shell-nesting indicator.
PS1='[%m] %B%h%b '
if (( $+fg )); then
    PS1+="%(?.%{$fg[green]%}.%{$fg[red]%})"
    PS1+="%B${(r:$((SHLVL * 2))::%#:)}%b"
    PS1+="%{$fg[default]%} "
else
    # Display the last exit status directly.
    PS1+="(%?) %B${(r:$((SHLVL * 2))::%#:)}%b "
fi

# Leave the -g in case I ever wrap this in a function again.
typeset -ag precmd_functions

# Right prompt: Current working directory (truncated to half screen
# width) and version control info.
precmd_rps_cwd() {
    RPS1="%B%$((COLUMNS / 2))<..<%~%b"
}
precmd_functions+=(precmd_rps_cwd)
autoload -Uz +X vcs_info 2>/dev/null && {
    precmd_rps_vcs() {
        # https://www.zsh.org/mla/workers/2021/msg00811.html
        # TODO Rework RPS1 to use %v and psvar?
        local vcs_info_msg_0_
        vcs_info && RPS1+=${vcs_info_msg_0_:+ ${vcs_info_msg_0_}}
    }
    precmd_functions+=(precmd_rps_vcs)

    zstyle ':vcs_info:*' enable git hg svn

    zstyle ':vcs_info:*' formats '(%s:%b)'
    zstyle ':vcs_info:*' actionformats '(%s:%b|%a)'
    zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b/%r'

    zstyle ':vcs_info:git:*' check-for-changes true
    if (( $+fg )); then
        # Color green/yellow/red if there are no/staged/unstaged changes.
        zstyle ':vcs_info:git:*' unstagedstr "%{$fg[red]%}"
        zstyle ':vcs_info:git:*' stagedstr "%{$fg[yellow]%}"
        zstyle ':vcs_info:git:*' formats \
            "%{$fg[green]%}%u%c(%s:%b)%{$fg[default]%}"
        zstyle ':vcs_info:git:*' actionformats \
            "%{$fg[green]%}%u%c(%s:%b|%a)%{$fg[default]%}"
    else
        zstyle ':vcs_info:git:*' unstagedstr ':U'
        zstyle ':vcs_info:git:*' stagedstr ':S'
        zstyle ':vcs_info:git:*' formats '(%s:%b%u%c)'
        zstyle ':vcs_info:git:*' actionformats '(%s:%b%u%c|%a)'
    fi
}

# Send current working directory to the terminal emulator.
autoload -Uz +X update_terminal_cwd 2>/dev/null && {
    precmd_functions+=(update_terminal_cwd)
}

# Enable completion and other things.
autoload -Uz run-help zargs zrecompile
autoload -Uz compinit && compinit -d $ZDOTDIR/zcompdump && {
    zstyle ':completion:*:descriptions' format '%B%d%b'
    if (( $+fg )); then
        zstyle ':completion:*:warnings' format \
            "%{$fg[red]%}%BNo matches for %d%b%{$fg[default]%}"
    else
        zstyle ':completion:*:warnings' format '%BNo matches for %d%b'
    fi
}

# Enable fancy globbing; stop at slashes when moving wordwise.
setopt EXTENDED_GLOB
WORDCHARS=${WORDCHARS//[\/.]/}

# History.
SAVEHIST=1000000
HISTSIZE=$SAVEHIST
HISTFILE=$ZDOTDIR/zsh_history
setopt EXTENDED_HISTORY
# < 5.0.6: Let shells append their history at exit instead of incrementally.
setopt INC_APPEND_HISTORY_TIME 2>/dev/null

# Interactive functions.
ls() { command ls -AFh "$@" }

# Print timing stats for commands that use over 10 seconds of CPU time.
REPORTTIME=10

# Source application-specific "topic" scripts.
for script in $ZDOTDIR/zshrc.d/*.zsh(N-.); do
    . $script
done
unset script

# Login shells will do this later.
if [[ ! -o LOGIN ]]; then
    unset_sh_helper_functions
fi

unset fg
