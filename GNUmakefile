# Template parameters.

prefix := $(wildcard ~)
macros := prefix


# Treat each child directory as a "module" and create lists of output
# files based on each module's subdirectory layout.
# - git_DOTFILES: list of output files to be generated by the "git" module
# - zsh_DOTFILES: list of output files to be generated by the "zsh" module
# ... etc.

VPATH := git lynx macports mercurial tmux zsh

define load_module
$(1)_DOTFILES := $$(shell find $(1) -type f ! \( -name module.mk -o \
                                                 -name '*.sw?' -o \
                                                 -name '*~' \))
$(1)_DOTFILES := $$(patsubst $(1)/%.m4,%,$$($(1)_DOTFILES))
$(1)_DOTFILES := $$(patsubst _%,.%,$$($(1)_DOTFILES))
$(1)_DOTFILES := $$(addprefix $$(prefix)/,$$($(1)_DOTFILES))

.PHONY: $(1) $(1)-install $(1)-uninstall
$(1) $(1)-install: $$($(1)_DOTFILES)
$(1)-uninstall:
	-rm -R $$($(1)_DOTFILES)
endef

$(foreach module,$(VPATH),$(eval $(call load_module,$(module))))


# Use "wildcard" to weed out nonexistent submakefiles.
include $(wildcard $(addsuffix /module.mk,$(VPATH)))


# The default rule does substitutions on the source templates and writes
# them to the output files.

defines := $(foreach macro,$(macros),-D __$(macro)__='$($(macro))')

.DELETE_ON_ERROR:
# mkdir -p may cause race conditions
.NOTPARALLEL:
.SECONDEXPANSION:

src = $(patsubst .%,_%,$*).m4
$(prefix)/% : $$(src) common.m4
	@mkdir -p -- "$(dir $@)"
	@'$(or $(M4),m4)' -P $(defines) common.m4 "$<" > "$@"
	@printf "Wrote $@\n" >&2


# Install and uninstall all modules.

ALL_DOTFILES := $(foreach module,$(VPATH),$($(module)_DOTFILES))

.DEFAULT_GOAL := install
.PHONY: install
install: $(ALL_DOTFILES)

.PHONY: uninstall
uninstall:
	-rm -R $(ALL_DOTFILES)


# Flotsam and jetsam

SHELL := /bin/sh

.SUFFIXES:
