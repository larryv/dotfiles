ifeq ($(or $(VERBOSE),0),0)
    quiet := @
endif

UMASK := 077

# Template parameters.
prefix := $(wildcard ~)
macros := prefix

# Treat each child directory listed in VPATH as a "module". Create lists
# of output files based on each module's subdirectory layout; also
# generate module-specific targets. For example:
# - git_DOTFILES: list of files to be generated by the "git" module
# - "make git" / "make git-install": install Git-related dotfiles
# - "make git-uninstall": delete Git-related dotfiles
# - "make install": install all dotfiles
# - "make uninstall": delete all dotfiles

VPATH := git lynx macports mercurial tmux zsh

.PHONY: install uninstall
install: $(addsuffix -install,$(VPATH))
uninstall: $(addsuffix -uninstall,$(VPATH))

define load_module
$(1)_DOTFILES := $$(shell find $(1) -type f ! \( -name module.mk -o \
                                                 -name '*.sw?' -o \
                                                 -name '*~' \))
$(1)_DOTFILES := $$(subst /_,/.,$$($(1)_DOTFILES))
$(1)_DOTFILES := $$(patsubst $(1)%.m4,$$(prefix)%,$$($(1)_DOTFILES))

.PHONY: $(1) $(1)-install $(1)-uninstall
$(1) $(1)-install: $$($(1)_DOTFILES)
$(1)-uninstall:
	rm -fR $$($(1)_DOTFILES)
endef

$(foreach module,$(VPATH),$(eval $(call load_module,$(module))))

# Modules can use submakefiles to define their own macros and whatnot.
sinclude $(addsuffix /module.mk,$(VPATH))

# Generate the M4 command-line definitions.
defines := $(foreach macro,$(macros),-D __$(macro)__='$($(macro))')

# mkdir -p may cause race conditions
.NOTPARALLEL:
.SECONDEXPANSION:

src = $(patsubst .%,_%,$(subst /.,/_,$*)).m4
$(prefix)/% : $$(src) common.m4
	$(quiet)umask $(UMASK) && \
mkdir -p -- "$$(dirname '$@')" && \
'$(or $(M4),m4)' -P $(defines) common.m4 '$<' > '$@'
	@printf '$(if $(quiet),Wrote %s)\n' '$@' >&2

# Flotsam and jetsam
SHELL := /bin/sh
.SUFFIXES:
