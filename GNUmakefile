# Defaults.

prefix := $(wildcard ~)

NAME := Lawrence VelÃ¡zquez
EMAIL := $(subst ALPHA,@,$(subst DELTA,.,larryvALPHAalumDELTAmitDELTAedu))
MACPORTS := /opt/local
COLEMAKEREL := $(wildcard ~/.colemakerel)


# Template substitution helpers.

nullstring :=
space := $(nullstring) #EOL

encode = $(subst $(space),SPACE,$(1))
decode = $(subst SPACE, ,$(1))


# Shared template parameters.

HEADER := "\#\#\# Generated by dotfiles setup: $$(date) \#\#\#\n\n"

SUBSTITUTIONS := $(call encode,s|__PREFIX__|$(prefix)|g)
SUBSTITUTIONS += $(call encode,s|__MACPORTS__|$(MACPORTS)|g)
SUBSTITUTIONS += $(call encode,s|__COLEMAKEREL__|$(COLEMAKEREL)|g)
SUBSTITUTIONS += $(call encode,s|__NAME__|$(NAME)|g)
SUBSTITUTIONS += $(call encode,s|__EMAIL__|$(EMAIL)|g)


# Treat each child directory as a "module" and create lists of output
# files based on each module's subdirectory layout.
# - git_DOTFILES: list of output files to be generated by the "git" module
# - zsh_DOTFILES: list of output files to be generated by the "zsh" module
# ... etc.

MODULES := $(patsubst %/,%,$(wildcard */))

define create_module_DOTFILES
$(1)_DOTFILES := $(patsubst $(1)/%,$(prefix)/%,\
    $(shell find $(1) -type f ! \( -name module.mk -o \
                                   -name '*.sw?' -o \
                                   -name '*~' \)\
    ))
endef

$(foreach module,$(MODULES),$(eval $(call create_module_DOTFILES,$(module))))


# Module-specific settings.

include $(addsuffix /module.mk,$(MODULES))


# The default rule does substitutions on the source templates and writes
# them to the output files.

VPATH := $(MODULES)

SED_SCRIPTS := $(foreach sub,$(SUBSTITUTIONS),-e '$(call decode,$(sub))')

.DELETE_ON_ERROR:
# mkdir -p may cause race conditions
.NOTPARALLEL:
$(prefix)/% : %
	@mkdir -p -- "$(dir $@)"
	@printf $(HEADER) > "$@"
	@sed -E $(SED_SCRIPTS) "$<" >> "$@"
	@printf "Wrote $@\n" >&2


# Install and uninstall all modules.

ALL_DOTFILES := $(foreach module,$(MODULES),$($(module)_DOTFILES))

.DEFAULT_GOAL := install
.PHONY: install
install: $(ALL_DOTFILES)

.PHONY: uninstall
uninstall:
	-rm -R $(ALL_DOTFILES)


# Create module-specific install/uninstall targets.

define create_module_targets
.PHONY: $(1) $(1)-install $(1)-uninstall
$(1) $(1)-install: $$($(1)_DOTFILES)
$(1)-uninstall:
	-rm -R $$($(1)_DOTFILES)
endef

$(foreach module,$(MODULES),$(eval $(call create_module_targets,$(module))))


# Flotsam and jetsam

SHELL := /bin/sh

.SUFFIXES:
